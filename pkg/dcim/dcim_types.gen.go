// Package dcim provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package dcim

import (
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for BadRequestIssuesSource.
const (
	Field          BadRequestIssuesSource = "field"
	Header         BadRequestIssuesSource = "header"
	QueryParameter BadRequestIssuesSource = "query.parameter"
)

// Defines values for DeploymentEntryState.
const (
	Attached DeploymentEntryState = "Attached"
	Detached DeploymentEntryState = "Detached"
)

// Defines values for LocationEntryGlresourceType.
const (
	Region LocationEntryGlresourceType = "Region"
	Zone   LocationEntryGlresourceType = "Zone"
)

// Defines values for LocationEntryLocationType.
const (
	LocationEntryLocationTypeColoDatacenter LocationEntryLocationType = "ColoDatacenter"
	LocationEntryLocationTypeColoFacility   LocationEntryLocationType = "ColoFacility"
)

// BadRequestError defines model for BadRequestError.
type BadRequestError struct {
	// DebugId A unique identifier for the instance of this error
	DebugId string `json:"debugId"`

	// ErrorCode A unique machine-friendly identifier for the error from a global list of enumerated identifier strings
	ErrorCode string `json:"errorCode"`

	// ErrorDetails Additional detailed information about the error
	ErrorDetails *[]struct {
		// Issues Array of bad request issues
		Issues []BadRequestIssues `json:"issues"`

		// Type The type of error details
		Type string `json:"type"`
	} `json:"errorDetails,omitempty"`

	// HttpStatusCode The HTTP equivalent status code
	HttpStatusCode int `json:"httpStatusCode"`

	// Message A user-friendly error message
	Message string `json:"message"`
}

// BadRequestIssues defines model for BadRequestIssues.
type BadRequestIssues struct {
	// Description An elaborate description of the issue. This can be used by developers to understand how the failure can be addressed
	Description *string `json:"description,omitempty"`

	// Source The part of the request with an issue
	Source BadRequestIssuesSource `json:"source"`

	// Subject The specific issue key
	Subject string `json:"subject"`
}

// BadRequestIssuesSource The part of the request with an issue
type BadRequestIssuesSource string

// ColoDatacenter defines model for ColoDatacenter.
type ColoDatacenter struct {
	// Count The number of datacenter entries returned
	Count *int `json:"count,omitempty"`

	// Devices Devices part of a rack in a datacenter
	Devices *[]DeviceEntry `json:"devices,omitempty"`

	// Grn URL of location resource in greenlake representing the entity
	Grn *string `json:"grn,omitempty"`

	// Id Unique ID of location resource
	Id *openapi_types.UUID `json:"id,omitempty"`

	// LocationType Location type
	LocationType *string `json:"locationType,omitempty"`

	// Racks Racks installed in the datacenter
	Racks *[]RackEntry `json:"racks,omitempty"`
}

// ColoFacility defines model for ColoFacility.
type ColoFacility struct {
	// Count The number of datacenter entries returned
	Count *int `json:"count,omitempty"`

	// Grn URL of location resource in greenlake representing the entity
	Grn *string `json:"grn,omitempty"`

	// Id Unique ID of location resource
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Items list of datacenters or datahalls
	Items *[]ColoDatacenter `json:"items,omitempty"`

	// LocationType Location type
	LocationType *string `json:"locationType,omitempty"`
}

// ColoProviderEntry defines model for ColoProviderEntry.
type ColoProviderEntry struct {
	// Apiurl Url to access API for the provider
	Apiurl *string `json:"apiurl,omitempty"`

	// CreatedAt Time of resource creation in Greenlake
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// CredentialsId The ID of credentials to retrieve the secret from vault
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// DisplayName Unique display name of the colo provider
	DisplayName *string `json:"displayName,omitempty"`

	// Id Unique ID of colo provider
	Id openapi_types.UUID `json:"id"`

	// ProviderProperties Url to access API for the provider
	ProviderProperties *struct {
		Prop1 *string `json:"prop1,omitempty"`
		Prop2 *string `json:"prop2,omitempty"`
	} `json:"providerProperties,omitempty" gorm:"embedded"`
}

// DeploymentEntry defines model for DeploymentEntry.
type DeploymentEntry struct {
	// CreatedAt Time of resource creation
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Devices Devices part of the deployment in a datacenter
	Devices *[]DeviceEntry `json:"devices,omitempty"`

	// FullRack True if the deployment occupies entire rack. Else False
	FullRack *bool `json:"fullRack,omitempty"`

	// Id Unique ID of deployment
	Id openapi_types.UUID `json:"id"`

	// LocationGrn Location GRN where the deployment is attached to
	LocationGrn *string `json:"locationGrn,omitempty"`

	// Racks Racks part of a deployment in a datacenter
	Racks *[]RackEntry `json:"racks,omitempty"`

	// ShippingorderNumber Colo shipping order for a deployment
	ShippingorderNumber *string `json:"shippingorderNumber,omitempty"`

	// State State of the deployment
	State *DeploymentEntryState `json:"state,omitempty"`
}

// DeploymentEntryState State of the deployment
type DeploymentEntryState string

// DeploymentList defines model for DeploymentList.
type DeploymentList struct {
	// Count The number of drift entries returned
	Count int `json:"count"`

	// Items list of deployments. Each deployment may be PCE or PCBe
	Items []DeploymentEntry `json:"items"`

	// Next Specifies the pagination cursor for the next page of resources. Will be 'null' if there are no further pages
	Next *string `json:"next,omitempty"`
}

// DeviceEntry defines model for DeviceEntry.
type DeviceEntry struct {
	// DatacenterId Datacenter ID the device is attached to
	DatacenterId *openapi_types.UUID `json:"datacenterId,omitempty"`

	// Depth Depth of the device in mm
	Depth *int `json:"depth,omitempty"`

	// DeviceConfiguration Custom device configurations
	DeviceConfiguration *struct {
		JsonBlob *string `json:"jsonBlob,omitempty"`
	} `json:"deviceConfiguration,omitempty"`
	DeviceMonetizationConfigLatest *DeviceMonetizationRecord `json:"deviceMonetizationConfigLatest,omitempty"`

	// DeviceMonetizationState Is this device in-use by workload
	DeviceMonetizationState *bool `json:"deviceMonetizationState,omitempty"`

	// DevicePosition Device position in the rack
	DevicePosition *struct {
		EndU   *int `json:"endU,omitempty"`
		StartU *int `json:"startU,omitempty"`
	} `json:"devicePosition,omitempty"`

	// DeviceRole Enumeration value assigned to device indicating the purpose
	DeviceRole *string `json:"deviceRole,omitempty"`

	// DeviceType Enumeration value assigned to the device
	DeviceType *string `json:"deviceType,omitempty"`

	// Endpoints list of OOB management IP addresses the device has
	Endpoints *[]string `json:"endpoints,omitempty"`

	// Grn Unique greenlake resource name assigned to the device
	Grn *string `json:"grn,omitempty"`

	// Height Height of the device in Rack units
	Height *string `json:"height,omitempty"`

	// Id Unique resource ID assigned to the device
	Id openapi_types.UUID `json:"id"`

	// LocationId The datacenter Id where the device is installed.
	LocationId *openapi_types.UUID `json:"locationId,omitempty"`

	// ManufacturerAttributes Manufacturer attributes for a device
	ManufacturerAttributes *struct {
		ManufacturerName *string `json:"manufacturerName,omitempty"`
		ModelNumber      *string `json:"modelNumber,omitempty"`
		ModuleId         *string `json:"moduleId,omitempty"`
		PartNumber       *string `json:"partNumber,omitempty"`
		SerialNumber     *string `json:"serialNumber,omitempty"`
	} `json:"manufacturerAttributes,omitempty"`

	// PowerAttributes Power specification of the device
	PowerAttributes *struct {
		Coolingmeasure *string `json:"coolingmeasure,omitempty"`
		Ratings        *string `json:"ratings,omitempty"`
	} `json:"powerAttributes,omitempty"`

	// RackId Rack instance Id the device is installed to
	RackId *openapi_types.UUID `json:"rackId,omitempty"`

	// Status Enumeration value with the operational state of the device
	Status *string `json:"status,omitempty"`

	// Weight Weightof the device in lbs
	Weight *string `json:"weight,omitempty"`

	// Width Width of the device in mm
	Width *int `json:"width,omitempty"`
}

// DeviceList defines model for DeviceList.
type DeviceList struct {
	// Count The number of drift entries returned
	Count int `json:"count"`

	// Items list of managed workspaces for the given User
	Items []DeviceEntry `json:"items"`

	// Next Specifies the pagination cursor for the next page of resources. Will be 'null' if there are no further pages
	Next *string `json:"next,omitempty"`
}

// DeviceMonetizationRecord defines model for DeviceMonetizationRecord.
type DeviceMonetizationRecord struct {
	// AttachedGlTenantId ID of the Greenlake tenant that this device is assigned to
	AttachedGlTenantId *openapi_types.UUID `json:"attachedGlTenantId,omitempty"`

	// CreatedAt Time of resource creation
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DeploymentId ID of the Greenlake deployment the rack is assigned to
	DeploymentId          *openapi_types.UUID `json:"deploymentId,omitempty"`
	TenantAssignmentState *string             `json:"tenantAssignmentState,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// DebugId A unique identifier for the instance of this error. Maybe same as trace Id
	DebugId string `json:"debugId"`

	// ErrorCode A unique machine-friendly identifier for the error from a global list of enumerated identifier strings
	ErrorCode string `json:"errorCode"`

	// ErrorDetails Additional detailed information about the error
	ErrorDetails *[]struct {
		// Metadata Any additional key value pairs that the service defines
		Metadata struct {
			RecommendedActions *[]string `json:"recommendedActions,omitempty"`
		} `json:"metadata"`

		// Source The source of the error. Typically a registered API group
		Source string `json:"source"`

		// Type The type of error details
		Type string `json:"type"`
	} `json:"errorDetails,omitempty"`

	// HttpStatusCode The HTTP equivalent status code
	HttpStatusCode int `json:"httpStatusCode"`

	// Message A user-friendly error message
	Message string `json:"message"`
}

// HeirarchicalInventory defines model for HeirarchicalInventory.
type HeirarchicalInventory struct {
	// Count The number of region resource entries returned
	Count *int `json:"count,omitempty"`

	// Items list of facility
	Items *[]ColoFacility `json:"items,omitempty"`
}

// InternalServerError defines model for InternalServerError.
type InternalServerError struct {
	// DebugId A unique identifier for the instance of this error
	DebugId string `json:"debugId"`

	// ErrorCode A unique machine-friendly identifier for the error from a global list of enumerated identifier strings
	ErrorCode string `json:"errorCode"`

	// ErrorDetails Additional detailed information about the error
	ErrorDetails *[]struct {
		// RetryAfterSeconds Seconds to wait before retrying
		RetryAfterSeconds int `json:"retryAfterSeconds"`

		// Type The type of error details
		Type string `json:"type"`
	} `json:"errorDetails,omitempty"`

	// HttpStatusCode The HTTP equivalent status code
	HttpStatusCode int `json:"httpStatusCode"`

	// Message A user-friendly error message
	Message string `json:"message"`
}

// LocationEntry defines model for LocationEntry.
type LocationEntry struct {
	// CreatedAt Time of resource creation
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// GlresourceGrn Greenlake location resource GRN the entity maps to
	GlresourceGrn *string `json:"glresourceGrn,omitempty"`

	// GlresourceType Greenlake location resource type the entity maps to
	GlresourceType *LocationEntryGlresourceType `json:"glresourceType,omitempty"`

	// Id Unique ID of colo location resource
	Id openapi_types.UUID `json:"id"`

	// LocationType The type of the location
	LocationType *LocationEntryLocationType `json:"locationType,omitempty"`

	// ParentLocationId Location resource Id of unique parent of this location type
	ParentLocationId *openapi_types.UUID `json:"parentLocationId,omitempty"`

	// PostalAddress Postal address for a location (if applicable)
	PostalAddress *string `json:"postalAddress,omitempty"`

	// ProviderId Unique ID of colo provider
	ProviderId *openapi_types.UUID `json:"providerId,omitempty"`

	// ProviderRegionName Unique region name of the colo provider
	ProviderRegionName *string `json:"providerRegionName,omitempty"`
}

// LocationEntryGlresourceType Greenlake location resource type the entity maps to
type LocationEntryGlresourceType string

// LocationEntryLocationType The type of the location
type LocationEntryLocationType string

// LocationList defines model for LocationList.
type LocationList struct {
	// Count The number of drift entries returned
	Count int `json:"count"`

	// Items list of locations for a given Provider
	Items []LocationEntry `json:"items"`

	// Next Specifies the pagination cursor for the next page of resources. Will be 'null' if there are no further pages
	Next *string `json:"next,omitempty"`
}

// ProviderList defines model for ProviderList.
type ProviderList struct {
	// Count The number of provider entries returned
	Count int `json:"count"`

	// Items list of registered provider
	Items []ColoProviderEntry `json:"items"`

	// Next Specifies the pagination cursor for the next page of resources. Will be 'null' if there are no further pages
	Next *string `json:"next,omitempty"`
}

// ProviderRegistrationInput defines model for ProviderRegistrationInput.
type ProviderRegistrationInput struct {
	ProviderCred struct {
		SecretId  *string `json:"secretId,omitempty"`
		SecretKey *string `json:"secretKey,omitempty"`
	} `json:"providerCred"`
	ProviderName string `json:"providerName"`
	ProviderUrl  string `json:"providerUrl"`
}

// RackEntry defines model for RackEntry.
type RackEntry struct {
	// DatacenterId Datacenter ID where the rack is installed
	DatacenterId *openapi_types.UUID `json:"datacenterId,omitempty"`

	// Depth Depth of the device in mm
	Depth                          *int                      `json:"depth,omitempty"`
	DeviceMonetizationConfigLatest *DeviceMonetizationRecord `json:"deviceMonetizationConfigLatest,omitempty"`

	// DeviceMonetizationState Is this device in-use by workload
	DeviceMonetizationState *bool `json:"deviceMonetizationState,omitempty"`

	// Grn Unique greenlake resource name assigned to the rack
	Grn *string `json:"grn,omitempty"`

	// Height Height of the racks in Rack units
	Height *string `json:"height,omitempty"`

	// Id Unique resource ID assigned to the rack
	Id openapi_types.UUID `json:"id"`

	// LocationId The datacenter Id where the device is installed.
	LocationId *openapi_types.UUID `json:"locationId,omitempty"`

	// ManufacturerAttributes Manufacturer attributes for a rack
	ManufacturerAttributes *struct {
		ManufacturerName *string `json:"manufacturerName,omitempty"`
		ModelNumber      *string `json:"modelNumber,omitempty"`
		ModuleId         *string `json:"moduleId,omitempty"`
		PartNumber       *string `json:"partNumber,omitempty"`
		SerialNumber     *string `json:"serialNumber,omitempty"`
	} `json:"manufacturerAttributes,omitempty"`

	// PowerAttributes Power specification of the device
	PowerAttributes *struct {
		Coolingmeasure *string `json:"coolingmeasure,omitempty"`
		Ratings        *string `json:"ratings,omitempty"`
	} `json:"powerAttributes,omitempty"`

	// RackConfiguration Custom rack configurations and details
	RackConfiguration *struct {
		JsonBlob *string `json:"jsonBlob,omitempty"`
	} `json:"rackConfiguration,omitempty"`

	// Role Enumeration value assigned to the rack based on its purpose
	Role *string `json:"role,omitempty"`

	// Status Enumeration value for operational state of the rack
	Status *string `json:"status,omitempty"`

	// Weight Weight of the device in lbs
	Weight *string `json:"weight,omitempty"`

	// Width Width of the device in mm
	Width *int `json:"width,omitempty"`
}

// RackList defines model for RackList.
type RackList struct {
	// Count The number of drift entries returned
	Count int `json:"count"`

	// Items list of managed workspaces for the given User
	Items []RackEntry `json:"items"`

	// Next Specifies the pagination cursor for the next page of resources. Will be 'null' if there are no further pages
	Next *string `json:"next,omitempty"`
}

// BadRequest defines model for BadRequest.
type BadRequest = BadRequestError

// Conflict defines model for Conflict.
type Conflict = Error

// DeploymentListResponse defines model for DeploymentListResponse.
type DeploymentListResponse = DeploymentList

// DeviceListResponse defines model for DeviceListResponse.
type DeviceListResponse = DeviceList

// Forbidden defines model for Forbidden.
type Forbidden = Error

// HeirarchicalInventoryResponse defines model for HeirarchicalInventoryResponse.
type HeirarchicalInventoryResponse = HeirarchicalInventory

// LocationListResponse defines model for LocationListResponse.
type LocationListResponse = LocationList

// NotFound defines model for NotFound.
type NotFound = Error

// ProviderListResponse defines model for ProviderListResponse.
type ProviderListResponse = ProviderList

// RackListResponse defines model for RackListResponse.
type RackListResponse = RackList

// RegistrationResponse defines model for RegistrationResponse.
type RegistrationResponse = ColoProviderEntry

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// GetManagedDeploymentsParams defines parameters for GetManagedDeployments.
type GetManagedDeploymentsParams struct {
	// Id Id of a specific location instance
	Id openapi_types.UUID `form:"id" json:"id"`
}

// ListLocationsParams defines parameters for ListLocations.
type ListLocationsParams struct {
	Next       *string `form:"next,omitempty" json:"next,omitempty"`
	Limit      *int    `form:"limit,omitempty" json:"limit,omitempty"`
	ProviderId string  `form:"providerId" json:"providerId"`
}

// ListProvidersParams defines parameters for ListProviders.
type ListProvidersParams struct {
	Next  *string `form:"next,omitempty" json:"next,omitempty"`
	Limit *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetAllInventoryParams defines parameters for GetAllInventory.
type GetAllInventoryParams struct {
	Next  *string `form:"next,omitempty" json:"next,omitempty"`
	Limit *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// RegisterProviderJSONRequestBody defines body for RegisterProvider for application/json ContentType.
type RegisterProviderJSONRequestBody = ProviderRegistrationInput
